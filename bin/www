#!/usr/bin/env node
/**
 * @module bin/www
 * @requires http
 * @requires debug
 * @requires ../app
 */

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('restsample:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 * @constant {(number|string)}
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 * @constant {http.Server}
 */
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 * @param {(number|string)} val - Port value to normalize
 * @returns {(number|string|boolean)} - Normalized port value
 * @description Normalizes port value to handle different input types
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 * @param {Error} error - Error object
 * @throws {Error} - Throws error if not a listen error
 * @description Handles specific listen errors with friendly messages
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 * @description Logs debug information when server starts listening
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
